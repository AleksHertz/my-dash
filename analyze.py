import os
import re

import pandas as pd
import glob
from openpyxl import load_workbook
from datetime import datetime
import plotly.express as px
import logging
from plotly.subplots import make_subplots
import plotly.graph_objects as go
import numpy as np
import time
import functools

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
os.makedirs("–ª–æ–≥–∏", exist_ok=True)
logging.basicConfig(
    filename='–ª–æ–≥–∏/–∞–Ω–∞–ª–∏–∑_—Å–∫–ª–∞–¥–∞.log',
    level=logging.INFO,
    format='%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s'
)

def timing_decorator(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()
        duration = end - start
        msg = f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ '{func.__name__}': {duration:.3f} —Å–µ–∫—É–Ω–¥"
        print(msg)
        logging.info(msg)
        return result
    return wrapper

@timing_decorator
def parse_date_from_cell(cell_value, file_path):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏.
    –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –±–µ—Ä—ë—Ç –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞.
    –õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    if cell_value is None:
        date = datetime.fromtimestamp(os.path.getctime(file_path))
        logging.warning(f'–î–∞—Ç–∞ –≤ —Ñ–∞–π–ª–µ {file_path} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {date}')
        return date

    date_str = str(cell_value).strip()
    date = pd.to_datetime(date_str, errors='coerce', dayfirst=True)
    if pd.isna(date):
        date = datetime.fromtimestamp(os.path.getctime(file_path))
        logging.warning(f'–î–∞—Ç–∞ "{date_str}" –≤ —Ñ–∞–π–ª–µ {file_path} –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {date}')
    else:
        logging.info(f'–î–∞—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ {file_path}: "{date_str}" —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–∞–∫ {date}')
    return date

@timing_decorator
def read_excel_file(file_path, sklad_name):
    extension = os.path.splitext(file_path)[1].lower()
    data = []

    try:
        if extension == '.xls':
            df_raw = pd.read_excel(file_path, header=None, engine='xlrd')
            date_cell = df_raw.iloc[1, 0]
            date = parse_date_from_cell(date_cell, file_path)

            for idx in range(4, len(df_raw)):
                row = df_raw.iloc[idx]
                if pd.isna(row[5]):
                    continue
                data.append({
                    '–î–∞—Ç–∞': date,
                    '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞': row[1],
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': row[2] or 0,
                    '–¶–µ–Ω–∞': row[3] or 0,
                    '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å': row[4],
                    '–ê—Ä—Ç–∏–∫—É–ª': str(row[5]).strip(),
                    '–°–∫–ª–∞–¥': sklad_name
                })

        elif extension == '.xlsx':
            wb = load_workbook(filename=file_path, data_only=True)
            ws = wb.active
            date_cell = ws['A2'].value
            date = parse_date_from_cell(date_cell, file_path)

            for i in range(5, ws.max_row + 1):
                article = ws[f'F{i}'].value
                if article is None:
                    continue
                data.append({
                    '–î–∞—Ç–∞': date,
                    '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞': ws[f'B{i}'].value,
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': ws[f'C{i}'].value or 0,
                    '–¶–µ–Ω–∞': ws[f'D{i}'].value or 0,
                    '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å': ws[f'E{i}'].value,
                    '–ê—Ä—Ç–∏–∫—É–ª': str(article).strip(),
                    '–°–∫–ª–∞–¥': sklad_name
                })

        logging.info(f'–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω —Ñ–∞–π–ª: {file_path}')
        return pd.DataFrame(data)

    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}')
        return None
@timing_decorator
def process_folder(folder_path, sklad_name):
    files = sorted(glob.glob(os.path.join(folder_path, '*.xls*')))
    dfs = []
    for file in files:
        df = read_excel_file(file, sklad_name)
        if df is not None and not df.empty:
            dfs.append(df)
    if not dfs:
        logging.warning(f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–ø–∫–µ: {folder_path}')
        return None
    return pd.concat(dfs, ignore_index=True)
@timing_decorator
def generate_daily_sales_file(df_all: pd.DataFrame, output_path: str = '–∏—Ç–æ–≥_–¥–Ω–µ–≤–Ω—ã–µ_–ø—Ä–æ–¥–∞–∂–∏.csv'):
    try:
        if '–î–∞—Ç–∞' not in df_all.columns:
            logging.error("–ö–æ–ª–æ–Ω–∫–∞ '–î–∞—Ç–∞' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö ‚Äî –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂.")
            return

        if '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' not in df_all.columns:
            logging.error("–ö–æ–ª–æ–Ω–∫–∞ '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö ‚Äî –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂.")
            return

        if '–¶–µ–Ω–∞' not in df_all.columns:
            logging.error("–ö–æ–ª–æ–Ω–∫–∞ '–¶–µ–Ω–∞' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö ‚Äî –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª —Å —Ü–µ–Ω–∞–º–∏.")
            return

        # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Ü–µ–Ω—ã (—Ü–µ–Ω–∞ ‚Äî –ø–µ—Ä–≤–∞—è –∑–∞ –¥–µ–Ω—å)
        df_daily = (
            df_all
            .sort_values('–î–∞—Ç–∞')  # —á—Ç–æ–±—ã first() —Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            .groupby(['–î–∞—Ç–∞', '–ê—Ä—Ç–∏–∫—É–ª', '–°–∫–ª–∞–¥'], as_index=False)
            .agg({
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': 'sum',
                '–¶–µ–Ω–∞': 'first'
            })
            .rename(columns={'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': '–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ', '–¶–µ–Ω–∞': '–¶–µ–Ω–∞_–≤_–Ω–∞—á–∞–ª–µ_–¥–Ω—è'})
        )

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        df_daily.sort_values(['–î–∞—Ç–∞', '–°–∫–ª–∞–¥', '–ê—Ä—Ç–∏–∫—É–ª'], inplace=True)

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
        df_daily.to_csv(output_path, index=False, encoding='utf-8-sig')
        logging.info(f"üìÅ CSV-—Ñ–∞–π–ª —Å –¥–Ω–µ–≤–Ω—ã–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å –¥–Ω–µ–≤–Ω—ã–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏: {e}")


@timing_decorator
def analyze_with_restock_vectorized_monthly(df_all):
    # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ---
    df_all['–î–∞—Ç–∞'] = pd.to_datetime(df_all['–î–∞—Ç–∞'], format='%d-%m-%Y', errors='coerce')

    df_daily = df_all.groupby(['–ê—Ä—Ç–∏–∫—É–ª', '–°–∫–ª–∞–¥', '–î–∞—Ç–∞'], as_index=False).agg({
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': 'first',
        '–¶–µ–Ω–∞': 'first',
        '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞': 'first',
        '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å': 'first'
    })

    df_daily = df_daily.sort_values(['–ê—Ä—Ç–∏–∫—É–ª', '–°–∫–ª–∞–¥', '–î–∞—Ç–∞']).copy()

    df_daily['–ì–æ–¥'] = df_daily['–î–∞—Ç–∞'].dt.year
    df_daily['–ú–µ—Å—è—Ü'] = df_daily['–î–∞—Ç–∞'].dt.month

    # --- –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π ---
    df_daily['diff_qty'] = df_daily.groupby(['–ê—Ä—Ç–∏–∫—É–ª', '–°–∫–ª–∞–¥'])['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].diff().fillna(0)
    df_daily['–ü—Ä–æ–¥–∞–Ω–æ'] = (-df_daily['diff_qty']).clip(lower=0)
    df_daily['–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ'] = df_daily['diff_qty'].clip(lower=0)

    # --- –ü–æ–∏—Å–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π –º–µ–∂–¥—É —Å–∫–ª–∞–¥–∞–º–∏ ---
    restock_rows = df_daily[df_daily['diff_qty'] > 0][['–î–∞—Ç–∞', '–ê—Ä—Ç–∏–∫—É–ª', '–°–∫–ª–∞–¥', 'diff_qty']].copy()
    restock_rows.rename(columns={'–°–∫–ª–∞–¥': '–°–∫–ª–∞–¥_–∫—É–¥–∞', 'diff_qty': '–ö–æ–ª-–≤–æ'}, inplace=True)

    sold_rows = df_daily[df_daily['diff_qty'] < 0][['–î–∞—Ç–∞', '–ê—Ä—Ç–∏–∫—É–ª', '–°–∫–ª–∞–¥', 'diff_qty']].copy()
    sold_rows.rename(columns={'–°–∫–ª–∞–¥': '–°–∫–ª–∞–¥_–æ—Ç–∫—É–¥–∞', 'diff_qty': '–ö–æ–ª-–≤–æ'}, inplace=True)
    sold_rows['–ö–æ–ª-–≤–æ'] = -sold_rows['–ö–æ–ª-–≤–æ']

    merged_moves = pd.merge(
        restock_rows, sold_rows,
        on=['–î–∞—Ç–∞', '–ê—Ä—Ç–∏–∫—É–ª', '–ö–æ–ª-–≤–æ'], how='inner'
    )
    merged_moves = merged_moves[merged_moves['–°–∫–ª–∞–¥_–∫—É–¥–∞'] != merged_moves['–°–∫–ª–∞–¥_–æ—Ç–∫—É–¥–∞']]

    for _, row in merged_moves.iterrows():
        mask_restock = (
            (df_daily['–î–∞—Ç–∞'] == row['–î–∞—Ç–∞']) &
            (df_daily['–ê—Ä—Ç–∏–∫—É–ª'] == row['–ê—Ä—Ç–∏–∫—É–ª']) &
            (df_daily['–°–∫–ª–∞–¥'] == row['–°–∫–ª–∞–¥_–∫—É–¥–∞']) &
            (df_daily['diff_qty'] == row['–ö–æ–ª-–≤–æ'])
        )
        df_daily.loc[mask_restock, '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ'] = 0

        mask_sold = (
            (df_daily['–î–∞—Ç–∞'] == row['–î–∞—Ç–∞']) &
            (df_daily['–ê—Ä—Ç–∏–∫—É–ª'] == row['–ê—Ä—Ç–∏–∫—É–ª']) &
            (df_daily['–°–∫–ª–∞–¥'] == row['–°–∫–ª–∞–¥_–æ—Ç–∫—É–¥–∞']) &
            (df_daily['diff_qty'] == -row['–ö–æ–ª-–≤–æ'])
        )
        df_daily.loc[mask_sold, '–ü—Ä–æ–¥–∞–Ω–æ'] = 0

    –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è = merged_moves.rename(columns={
        '–î–∞—Ç–∞': '–î–∞—Ç–∞',
        '–ê—Ä—Ç–∏–∫—É–ª': '–ê—Ä—Ç–∏–∫—É–ª',
        '–°–∫–ª–∞–¥_–æ—Ç–∫—É–¥–∞': '–°–∫–ª–∞–¥_–æ—Ç–∫—É–¥–∞',
        '–°–∫–ª–∞–¥_–∫—É–¥–∞': '–°–∫–ª–∞–¥_–∫—É–¥–∞',
        '–ö–æ–ª-–≤–æ': '–ö–æ–ª-–≤–æ'
    })[['–î–∞—Ç–∞', '–ê—Ä—Ç–∏–∫—É–ª', '–°–∫–ª–∞–¥_–æ—Ç–∫—É–¥–∞', '–°–∫–ª–∞–¥_–∫—É–¥–∞', '–ö–æ–ª-–≤–æ']].to_dict(orient='records')

    # --- –§–∏–ª—å—Ç—Ä —Ü–µ–Ω (–æ—Å—Ç–∞–≤–∏–ª –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ, –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ) ---
    df_unique_price = df_daily.groupby(['–ê—Ä—Ç–∏–∫—É–ª', '–°–∫–ª–∞–¥', '–î–∞—Ç–∞'], as_index=False)['–¶–µ–Ω–∞'].first()

    price_counts = df_unique_price.groupby([
        '–ê—Ä—Ç–∏–∫—É–ª', '–°–∫–ª–∞–¥',
        df_unique_price['–î–∞—Ç–∞'].dt.year.rename('–ì–æ–¥'),
        df_unique_price['–î–∞—Ç–∞'].dt.month.rename('–ú–µ—Å—è—Ü'),
        '–¶–µ–Ω–∞'
    ])['–î–∞—Ç–∞'].nunique().reset_index(name='–î–Ω–µ–π_—Å_—Ü–µ–Ω–æ–π')

    # price_counts = price_counts[price_counts['–î–Ω–µ–π_—Å_—Ü–µ–Ω–æ–π'] >= 2]

    df_filtered_price = pd.merge(
        df_unique_price,
        price_counts[['–ê—Ä—Ç–∏–∫—É–ª', '–°–∫–ª–∞–¥', '–ì–æ–¥', '–ú–µ—Å—è—Ü', '–¶–µ–Ω–∞']],
        on=['–ê—Ä—Ç–∏–∫—É–ª', '–°–∫–ª–∞–¥', '–¶–µ–Ω–∞'],
        how='inner'
    )

    price_stats = df_unique_price.groupby(['–ê—Ä—Ç–∏–∫—É–ª', '–°–∫–ª–∞–¥', df_unique_price['–î–∞—Ç–∞'].dt.year.rename('–ì–æ–¥'),
                                           df_unique_price['–î–∞—Ç–∞'].dt.month.rename('–ú–µ—Å—è—Ü')]).agg(
        –ú–∏–Ω_—Ü–µ–Ω–∞=('–¶–µ–Ω–∞', 'min'),
        –ú–∞–∫—Å_—Ü–µ–Ω–∞=('–¶–µ–Ω–∞', 'max')
    ).reset_index()

    # --- –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –º–µ—Å—è—Ü–∞–º ---
    df_sales = df_daily.groupby(['–ê—Ä—Ç–∏–∫—É–ª', '–°–∫–ª–∞–¥', '–ì–æ–¥', '–ú–µ—Å—è—Ü']).agg(
        –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞=('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', 'first'),
        –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å=('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', 'first'),
        –í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ=('–ü—Ä–æ–¥–∞–Ω–æ', 'sum'),
        –í—Å–µ–≥–æ_–ø–æ–ø–æ–ª–Ω–µ–Ω–æ=('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', 'sum'),
        –î–Ω–µ–π_–ø—Ä–æ–¥–∞–∂=('–ü—Ä–æ–¥–∞–Ω–æ', lambda x: (x > 0).sum()),
        –°—Ä–µ–¥–Ω—è—è_—Ü–µ–Ω–∞=('–¶–µ–Ω–∞', 'mean'),
        –î–Ω–µ–π_–≤_–Ω–∞–ª–∏—á–∏–∏=('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', lambda x: (x > 0).sum()),
        –ü–æ—Å–ª–µ–¥–Ω–∏–π_–æ—Å—Ç–∞—Ç–æ–∫=('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'last'),
        –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö_–¥–Ω–µ–π=('–î–∞—Ç–∞', 'nunique')
    ).reset_index()

    df_sales['–î–Ω–µ–π_–≤_–Ω–∞–ª–∏—á–∏–∏'] = df_sales[['–î–Ω–µ–π_–≤_–Ω–∞–ª–∏—á–∏–∏', '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö_–¥–Ω–µ–π']].min(axis=1)
    df_sales['–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å'] = df_sales['–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ'] / df_sales['–î–Ω–µ–π_–ø—Ä–æ–¥–∞–∂'].replace(0, 1)

    df_price = df_daily.sort_values('–î–∞—Ç–∞').groupby(['–ê—Ä—Ç–∏–∫—É–ª', '–°–∫–ª–∞–¥', '–ì–æ–¥', '–ú–µ—Å—è—Ü']).agg(
        –¶–µ–Ω–∞_–≤_–Ω–∞—á–∞–ª–µ=('–¶–µ–Ω–∞', 'first'),
        –¶–µ–Ω–∞_–≤_–∫–æ–Ω—Ü–µ=('–¶–µ–Ω–∞', 'last')
    ).reset_index()

    df_price['–ò–∑–º–µ–Ω–µ–Ω–∏–µ_—Ü–µ–Ω—ã_–∞–±—Å'] = df_price['–¶–µ–Ω–∞_–≤_–∫–æ–Ω—Ü–µ'] - df_price['–¶–µ–Ω–∞_–≤_–Ω–∞—á–∞–ª–µ']
    df_price['–ò–∑–º–µ–Ω–µ–Ω–∏–µ_—Ü–µ–Ω—ã_%'] = ((df_price['–¶–µ–Ω–∞_–≤_–∫–æ–Ω—Ü–µ'] / df_price['–¶–µ–Ω–∞_–≤_–Ω–∞—á–∞–ª–µ']) - 1) * 100
    df_price['–ò–∑–º–µ–Ω–µ–Ω–∏–µ_—Ü–µ–Ω—ã_%'] = df_price['–ò–∑–º–µ–Ω–µ–Ω–∏–µ_—Ü–µ–Ω—ã_%'].fillna(0)
    df_price['–ò–∑–º–µ–Ω–µ–Ω–∏–µ_—Ü–µ–Ω—ã_–∞–±—Å'] = df_price['–ò–∑–º–µ–Ω–µ–Ω–∏–µ_—Ü–µ–Ω—ã_–∞–±—Å'].fillna(0)

    df_sales = df_sales.merge(price_stats, on=['–ê—Ä—Ç–∏–∫—É–ª', '–°–∫–ª–∞–¥', '–ì–æ–¥', '–ú–µ—Å—è—Ü'], how='left')
    df_sales = df_sales.merge(df_price, on=['–ê—Ä—Ç–∏–∫—É–ª', '–°–∫–ª–∞–¥', '–ì–æ–¥', '–ú–µ—Å—è—Ü'], how='left')

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–∞/–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–¥–º–µ–Ω—ã ---
    def normalize_article(article):
        if pd.isna(article):
            return article
        return article.replace('-', '').replace(' ', '').upper()

    def normalize_nomenclature(nom):
        if pd.isna(nom):
            return nom
        nom = nom.lower().replace('–¥–µ—Ñ–µ–∫—Ç', '').strip()
        return nom

    df_all['–ê—Ä—Ç–∏–∫—É–ª_–Ω–æ—Ä–º'] = df_all['–ê—Ä—Ç–∏–∫—É–ª'].apply(normalize_article)
    df_all['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_–Ω–æ—Ä–º'] = df_all['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'].apply(normalize_nomenclature)

    grouped = df_all.groupby('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_–Ω–æ—Ä–º')['–ê—Ä—Ç–∏–∫—É–ª_–Ω–æ—Ä–º'].nunique().reset_index()
    problematic = grouped[grouped['–ê—Ä—Ç–∏–∫—É–ª_–Ω–æ—Ä–º'] > 1]

    problematic_articles = df_all[df_all['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_–Ω–æ—Ä–º'].isin(problematic['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_–Ω–æ—Ä–º'])][
        ['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ê—Ä—Ç–∏–∫—É–ª', '–ê—Ä—Ç–∏–∫—É–ª_–Ω–æ—Ä–º', '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_–Ω–æ—Ä–º']].drop_duplicates().reset_index(drop=True)

    return df_sales, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è, problematic_articles

@timing_decorator
def normalize_article(article):
    # –ü—Ä–æ—Å—Ç–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞: —É–¥–∞–ª—è–µ–º –¥–µ—Ñ–∏—Å—ã, –ø—Ä–æ–±–µ–ª—ã, –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    if not isinstance(article, str):
        return article
    return article.replace('-', '').replace(' ', '').replace('_', '').upper()

def run_month_analysis():
    logging.info("üîç –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Å—è—Ü–∞")

    df_moscow = process_folder('data/moscow', '–ú–æ—Å–∫–≤–∞')
    df_khabarovsk = process_folder('data/khabarovsk', '–•–∞–±–∞—Ä–æ–≤—Å–∫')

    if df_moscow is None and df_khabarovsk is None:
        logging.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return

    df_all = pd.concat([df for df in [df_moscow, df_khabarovsk] if df is not None], ignore_index=True)
    df_all.dropna(subset=['–ê—Ä—Ç–∏–∫—É–ª'], inplace=True)

    # –ü—Ä–∏–≤–æ–¥–∏–º –∞—Ä—Ç–∏–∫—É–ª—ã –∫ —Å—Ç—Ä–æ–∫–∞–º, —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    df_all['–ê—Ä—Ç–∏–∫—É–ª'] = df_all['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip().apply(normalize_article)

    df_all['–î–∞—Ç–∞'] = pd.to_datetime(df_all['–î–∞—Ç–∞'], errors='coerce')

    df_result, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è, df_flags = analyze_with_restock_vectorized_monthly(df_all)

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
    rename_map = {
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': '–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ',
        '–ü—Ä–æ–¥–∞–Ω–æ': '–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ',
        '–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ': '–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ',
        '–ü–æ–ø–æ–ª–Ω–µ–Ω–æ': '–í—Å–µ–≥–æ_–ø–æ–ø–æ–ª–Ω–µ–Ω–æ',
        '–î–Ω–∏ –ø—Ä–æ–¥–∞–∂': '–î–Ω–µ–π_–ø—Ä–æ–¥–∞–∂',
        '–î–Ω–µ–π –ø—Ä–æ–¥–∞–∂': '–î–Ω–µ–π_–ø—Ä–æ–¥–∞–∂',
        '–¶–µ–Ω–∞ –≤ –Ω–∞—á–∞–ª–µ': '–¶–µ–Ω–∞_–≤_–Ω–∞—á–∞–ª–µ',
        '–¶–µ–Ω–∞ –≤ –∫–æ–Ω—Ü–µ': '–¶–µ–Ω–∞_–≤_–∫–æ–Ω—Ü–µ',
        '–î–Ω–∏ –≤ –Ω–∞–ª–∏—á–∏–∏': '–î–Ω–µ–π_–≤_–Ω–∞–ª–∏—á–∏–∏',
    }
    df_result.rename(columns=rename_map, inplace=True)

    needed_cols = ['–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ', '–í—Å–µ–≥–æ_–ø–æ–ø–æ–ª–Ω–µ–Ω–æ', '–î–Ω–µ–π_–ø—Ä–æ–¥–∞–∂',
                   '–°—Ä–µ–¥–Ω—è—è_—Ü–µ–Ω–∞', '–ú–∏–Ω_—Ü–µ–Ω–∞', '–ú–∞–∫—Å_—Ü–µ–Ω–∞', '–¶–µ–Ω–∞_–≤_–Ω–∞—á–∞–ª–µ',
                   '–¶–µ–Ω–∞_–≤_–∫–æ–Ω—Ü–µ', '–î–Ω–µ–π_–≤_–Ω–∞–ª–∏—á–∏–∏']
    for col in needed_cols:
        if col not in df_result.columns:
            df_result[col] = 0 if '—Ü–µ–Ω–∞' not in col.lower() else None

    if isinstance(df_flags, list):
        df_flags = pd.DataFrame(df_flags) if df_flags else pd.DataFrame()

    if not df_flags.empty and '–î–∞—Ç–∞' in df_flags.columns:
        df_flags['–î–∞—Ç–∞'] = pd.to_datetime(df_flags['–î–∞—Ç–∞'], errors='coerce').dt.strftime('%d/%m/%Y')

    df_result.to_excel('–∏—Ç–æ–≥_–ø–æ_–º–µ—Å—è—Ü—É.xlsx', index=False)
    df_flags.to_excel('—Ñ–∏–∫—Å–∞—Ü–∏—è_–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π.xlsx', index=False)

    df_total = df_result.groupby(['–ê—Ä—Ç–∏–∫—É–ª', '–°–∫–ª–∞–¥']).agg(
        –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞=('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', 'first'),
        –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å=('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', 'first'),
        –í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ=('–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ', 'sum'),
        –í—Å–µ–≥–æ_–ø–æ–ø–æ–ª–Ω–µ–Ω–æ=('–í—Å–µ–≥–æ_–ø–æ–ø–æ–ª–Ω–µ–Ω–æ', 'sum'),
        –î–Ω–µ–π_–ø—Ä–æ–¥–∞–∂=('–î–Ω–µ–π_–ø—Ä–æ–¥–∞–∂', 'sum'),
        –°—Ä–µ–¥–Ω—è—è_—Ü–µ–Ω–∞=('–°—Ä–µ–¥–Ω—è—è_—Ü–µ–Ω–∞', 'mean'),
        –ú–∏–Ω_—Ü–µ–Ω–∞=('–ú–∏–Ω_—Ü–µ–Ω–∞', 'min'),
        –ú–∞–∫—Å_—Ü–µ–Ω–∞=('–ú–∞–∫—Å_—Ü–µ–Ω–∞', 'max'),
        –¶–µ–Ω–∞_–≤_–Ω–∞—á–∞–ª–µ=('–¶–µ–Ω–∞_–≤_–Ω–∞—á–∞–ª–µ', 'first'),
        –¶–µ–Ω–∞_–≤_–∫–æ–Ω—Ü–µ=('–¶–µ–Ω–∞_–≤_–∫–æ–Ω—Ü–µ', 'last'),
        –î–Ω–µ–π_–≤_–Ω–∞–ª–∏—á–∏–∏=('–î–Ω–µ–π_–≤_–Ω–∞–ª–∏—á–∏–∏', 'sum')
    ).reset_index()

    df_total['–î–Ω–µ–π_–ø—Ä–æ–¥–∞–∂'] = df_total['–î–Ω–µ–π_–ø—Ä–æ–¥–∞–∂'].replace(0, 1)
    df_total['–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å'] = df_total['–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ'] / df_total['–î–Ω–µ–π_–ø—Ä–æ–¥–∞–∂']

    top_fast = df_total[df_total['–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ'] > 0].sort_values('–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å', ascending=False).head(1000)
    top_slow = df_total[df_total['–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ'] == 0].sort_values('–î–Ω–µ–π_–≤_–Ω–∞–ª–∏—á–∏–∏', ascending=False).head(1000)
    top_restocked = df_total.sort_values('–í—Å–µ–≥–æ_–ø–æ–ø–æ–ª–Ω–µ–Ω–æ', ascending=False).head(1000)

    top_fast.to_excel('—Å–∞–º—ã–µ_—Ö–æ–¥–æ–≤—ã–µ.xlsx', index=False)
    top_slow.to_excel('–∑–∞–ª–µ–∂–∞–ª—ã–µ.xlsx', index=False)
    top_restocked.to_excel('—á–∞—â–µ_–≤—Å–µ–≥–æ_–ø–æ–ø–æ–ª–Ω—è–ª–∏—Å—å.xlsx', index=False)

    generate_daily_sales_file(df_all, output_path='–∏—Ç–æ–≥_–¥–Ω–µ–≤–Ω—ã–µ_–ø—Ä–æ–¥–∞–∂–∏.csv')

    logging.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –º–µ—Å—è—Ü–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == '__main__':
    run_month_analysis()