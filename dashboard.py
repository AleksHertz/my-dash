import dash
from dash import dcc, html, Input, Output, State
import plotly.express as px
import plotly.graph_objs as go
import pandas as pd
import os
from dash import ctx
import io
import dash_bootstrap_components as dbc
import logging
# --------------------
# –ù–ê–°–¢–†–û–ô–ö–ò
# --------------------
HEIGHT_PER_BAR = 30  # –≤—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ px
MAX_VISIBLE_BARS = 50  # —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
MAX_HEIGHT = HEIGHT_PER_BAR * MAX_VISIBLE_BARS  # –≤—ã—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ px

# --------------------
# –ó–ê–ì–†–£–ó–ö–ê –ò –ü–†–ï–î–û–ë–†–ê–ë–û–¢–ö–ê (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
# --------------------
def safe_read_excel(path):
    try:
        if path and os.path.exists(path):
            return pd.read_excel(path)
    except Exception:
        pass
    return pd.DataFrame()

df_result = safe_read_excel('–∏—Ç–æ–≥_–ø–æ_–º–µ—Å—è—Ü—É.xlsx')
df_fast = safe_read_excel('—Å–∞–º—ã–µ_—Ö–æ–¥–æ–≤—ã–µ.xlsx')
df_restock = safe_read_excel('—á–∞—â–µ_–≤—Å–µ–≥–æ_–ø–æ–ø–æ–ª–Ω—è–ª–∏—Å—å.xlsx')
df_peaks = pd.read_excel('–≤—Å–ø–ª–µ—Å–∫–∏_–ø—Ä–æ–¥–∞–∂1.xlsx')
df_peaks['–î–∞—Ç–∞'] = pd.to_datetime(df_peaks['–î–∞—Ç–∞'])

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫–æ–ª–æ–Ω–∫—É –í—Å–ø–ª–µ—Å–∫ –∫ –±—É–ª–µ–≤–æ–º—É —Ç–∏–ø—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
df_peaks['–í—Å–ø–ª–µ—Å–∫'] = df_peaks['–í—Å–ø–ª–µ—Å–∫'].astype(bool)

# –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
if not df_fast.empty:
    df_fast['–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ'] = pd.to_numeric(df_fast.get('–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ', 0), errors='coerce').fillna(0)
    df_fast = df_fast.dropna(subset=['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'])

if not df_restock.empty:
    df_restock['–í—Å–µ–≥–æ_–ø–æ–ø–æ–ª–Ω–µ–Ω–æ'] = pd.to_numeric(df_restock.get('–í—Å–µ–≥–æ_–ø–æ–ø–æ–ª–Ω–µ–Ω–æ', df_restock.get('–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ', 0)), errors='coerce').fillna(0)
    df_restock = df_restock.dropna(subset=['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'])


# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ç–æ–ø–æ–≤
fast_grouped = df_fast.groupby(['–°–∫–ª–∞–¥', '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ê—Ä—Ç–∏–∫—É–ª'], as_index=False)['–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ'].sum() if not df_fast.empty else pd.DataFrame()
restock_grouped = df_restock.groupby(['–°–∫–ª–∞–¥', '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ê—Ä—Ç–∏–∫—É–ª'], as_index=False)['–í—Å–µ–≥–æ_–ø–æ–ø–æ–ª–Ω–µ–Ω–æ'].sum() if not df_restock.empty else pd.DataFrame()

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
unique_sklads = df_result['–°–∫–ª–∞–¥'].dropna().unique().tolist() if not df_result.empty else []
unique_peak_sklads = sorted(df_peaks['–°–∫–ª–∞–¥'].dropna().unique()) if not df_peaks.empty else []
unique_peak_articles = sorted(df_peaks['–ê—Ä—Ç–∏–∫—É–ª'].dropna().unique()) if not df_peaks.empty else []
unique_peak_noms = sorted(df_peaks['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'].dropna().unique()) if not df_peaks.empty else []

# --------------------
# DASH APP
# --------------------
app = dash.Dash(__name__)
server = app.server
app.layout = html.Div([
    html.H1("–ê–Ω–∞–ª–∏–∑ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"),

    # ===================== –ë–ª–æ–∫ –¢–û–ü–´ =====================
    html.Div([
        html.H2("–¢–û–ü—ã –ø–æ —Å–∫–ª–∞–¥–∞–º"),

        html.Label("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥:"),
        dcc.Dropdown(
            id='sklad-filter',
            options=[{'label': s, 'value': s} for s in unique_sklads],
            value=unique_sklads,
            multi=True,
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∫–ª–∞–¥–æ–≤",
            clearable=True,
            style={'marginBottom': '20px'}
        ),

        # –í—ã–±–æ—Ä —Ç–æ–ø–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–ª—è —Ö–æ–¥–æ–≤—ã—Ö
        html.Label("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ö–æ–¥–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:"),
        dcc.RadioItems(
            id='top-n-selector',
            options=[
                {'label': '–¢–æ–ø 100', 'value': 100},
                {'label': '–¢–æ–ø 500', 'value': 500},
                {'label': '–¢–æ–ø 1000', 'value': 1000},
            ],
            value=100,
            labelStyle={'display': 'inline-block', 'marginRight': '15px'},
            style={'marginBottom': '20px'}
        ),

        html.H3("–¢–æ–ø —Å–∞–º—ã—Ö —Ö–æ–¥–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"),
        html.Div(
            dcc.Graph(id='graph-top-fast'),
            style={
                'height': '700px',
                'overflowY': 'scroll',
                'border': '1px solid #ddd',
                'padding': '5px',
                'marginBottom': '10px',
                'backgroundColor': 'white'
            }
        ),
        dbc.Button("üì• –í—ã–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ø —Ö–æ–¥–æ–≤—ã—Ö –≤ Excel", id="download-top-fast-btn", color="success", className="mb-4"),

        # –í—ã–±–æ—Ä —Ç–æ–ø–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π (–¥–æ–±–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä)
        html.Label("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º:"),
        dcc.RadioItems(
            id='top-n-selector-restock',
            options=[
                {'label': '–¢–æ–ø 100', 'value': 100},
                {'label': '–¢–æ–ø 500', 'value': 500},
                {'label': '–¢–æ–ø 1000', 'value': 1000},
            ],
            value=100,
            labelStyle={'display': 'inline-block', 'marginRight': '15px'},
            style={'marginBottom': '20px'}
        ),

        html.H3("–¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º"),
        html.Div(
            dcc.Graph(id='graph-top-restock'),
            style={
                'height': '700px',
                'overflowY': 'scroll',
                'border': '1px solid #ddd',
                'padding': '5px',
                'marginBottom': '10px',
                'backgroundColor': 'white'
            }
        ),
        dbc.Button("üì• –í—ã–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ø –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤ Excel", id="download-top-restock-btn", color="success"),

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        dcc.Download(id="download-top-fast"),
        dcc.Download(id="download-top-restock"),

    ], style={'marginBottom': 40}),

    # ===================== –ë–ª–æ–∫ –í–°–ü–õ–ï–°–ö–ò =====================
    html.Div([
        html.H2("–í—Å–ø–ª–µ—Å–∫–∏ –ø—Ä–æ–¥–∞–∂"),

        html.Div([
            html.Label("–°–∫–ª–∞–¥:"),
            dcc.Dropdown(
                id='peak-sklad-filter',
                options=[{'label': s, 'value': s} for s in unique_peak_sklads],
                multi=False,
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è –≤—Å–ø–ª–µ—Å–∫–æ–≤",
                clearable=True,
            ),

            html.Label("–ê—Ä—Ç–∏–∫—É–ª:"),
            dcc.Dropdown(
                id='peak-article-filter',
                options=[{'label': a, 'value': a} for a in unique_peak_articles],
                multi=False,
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª",
                clearable=True,
            ),

            html.Label("–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞:"),
            dcc.Dropdown(
                id='peak-nom-filter',
                options=[],
                multi=False,
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É",
                clearable=True,
                searchable=True,
                style={'width': '100%'}
            ),

            html.Button("üì• –°–∫–∞—á–∞—Ç—å –≤ Excel", id="btn-download-peaks", n_clicks=0),
            dcc.Download(id="download-peaks-xlsx"),
        ], style={
            'maxWidth': 450,
            'marginBottom': 30,
            'display': 'flex',
            'flexDirection': 'column',
            'gap': '10px'
        }),

        dcc.Graph(id='graph-peaks'),

        html.Div([
            html.P("–ì—Ä–∞—Ñ–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç:"),
            html.Ul([
                html.Li("–ü—Ä–æ–¥–∞–∂–∏ (–æ—Å–∏ —Å–ª–µ–≤–∞)"),
                html.Li("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (–ø—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è, –ø—Ä–∞–≤–∞—è –æ—Å—å)"),
                html.Li("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—à—Ç—Ä–∏—Ö–æ–≤–∞—è –ª–∏–Ω–∏—è, –ø—Ä–∞–≤–∞—è –æ—Å—å)"),
            ]),
        ], style={'maxWidth': 600, 'fontStyle': 'italic', 'color': 'gray', 'marginTop': 10}),
    ]),
])
# --------------------
# –ö–û–õ–ë–≠–ö–ò
# --------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –í—ã–≥—Ä—É–∑–∫–∞ —Ç–æ–ø-—Ö–æ–¥–æ–≤—ã—Ö ---
@app.callback(
    Output("download-top-fast", "data"),
    Input("download-top-fast-btn", "n_clicks"),
    State("sklad-filter", "value"),  # –∑–∞–º–µ–Ω–∏–ª–∏ ID
    State("top-n-selector", "value"),  # –∑–∞–º–µ–Ω–∏–ª–∏ ID
    prevent_initial_call=True
)
def export_top_fast_to_excel(n_clicks, selected_sklads, top_n):
    if df_fast.empty or not selected_sklads:
        return None

    dff = df_fast[df_fast['–°–∫–ª–∞–¥'].isin(selected_sklads)]
    dff = dff.sort_values('–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ', ascending=False).head(top_n)

    if '–¶–µ–Ω–∞_–≤_–Ω–∞—á–∞–ª–µ' in dff.columns and '–¶–µ–Ω–∞_–≤_–∫–æ–Ω—Ü–µ' in dff.columns:
        dff['–ò–∑–º–µ–Ω–µ–Ω–∏–µ_—Ü–µ–Ω—ã_%'] = (
            (dff['–¶–µ–Ω–∞_–≤_–∫–æ–Ω—Ü–µ'] - dff['–¶–µ–Ω–∞_–≤_–Ω–∞—á–∞–ª–µ']) / dff['–¶–µ–Ω–∞_–≤_–Ω–∞—á–∞–ª–µ'] * 100
        ).round(2)

    if '–°—Ä–µ–¥–Ω–∏–π_–æ—Å—Ç–∞—Ç–æ–∫' in dff.columns:
        dff['–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å'] = (dff['–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ'] / dff['–°—Ä–µ–¥–Ω–∏–π_–æ—Å—Ç–∞—Ç–æ–∫']).round(2)

    return dcc.send_data_frame(dff.to_excel, f"—Ç–æ–ø_{top_n}_—Ö–æ–¥–æ–≤—ã–µ.xlsx", index=False)


@app.callback(
    Output("download-top-restock", "data"),
    Input("download-top-restock-btn", "n_clicks"),
    State("sklad-filter", "value"),  # –∑–∞–º–µ–Ω–∏–ª–∏ ID
    State("top-n-selector-restock", "value"),
    prevent_initial_call=True
)
def export_top_restock_to_excel(n_clicks, selected_sklads, top_n):
    if df_restock.empty or not selected_sklads:
        return None

    dff = df_restock[df_restock['–°–∫–ª–∞–¥'].isin(selected_sklads)]
    dff = dff.sort_values('–í—Å–µ–≥–æ_–ø–æ–ø–æ–ª–Ω–µ–Ω–æ', ascending=False).head(top_n)

    if '–¶–µ–Ω–∞_–≤_–Ω–∞—á–∞–ª–µ' in dff.columns and '–¶–µ–Ω–∞_–≤_–∫–æ–Ω—Ü–µ' in dff.columns:
        dff['–ò–∑–º–µ–Ω–µ–Ω–∏–µ_—Ü–µ–Ω—ã_%'] = (
            (dff['–¶–µ–Ω–∞_–≤_–∫–æ–Ω—Ü–µ'] - dff['–¶–µ–Ω–∞_–≤_–Ω–∞—á–∞–ª–µ']) / dff['–¶–µ–Ω–∞_–≤_–Ω–∞—á–∞–ª–µ'] * 100
        ).round(2)

    if '–°—Ä–µ–¥–Ω–∏–π_–æ—Å—Ç–∞—Ç–æ–∫' in dff.columns:
        dff['–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å'] = (dff['–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ'] / dff['–°—Ä–µ–¥–Ω–∏–π_–æ—Å—Ç–∞—Ç–æ–∫']).round(2)

    return dcc.send_data_frame(dff.to_excel, f"—Ç–æ–ø_{top_n}_–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.xlsx", index=False)


HEIGHT_PER_BAR = 25  # –í—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–º–æ–∂–Ω–æ –ø–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)
MAX_CONTAINER_HEIGHT = 700  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ px (–∫–∞–∫ –≤ layout)
@app.callback(
    Output('graph-top-fast', 'figure'),
    Input('sklad-filter', 'value'),
    Input('top-n-selector', 'value'),
)
def update_top_fast(selected_sklad, top_n):
    if not selected_sklad:
        return go.Figure()

    dff = fast_grouped[fast_grouped['–°–∫–ª–∞–¥'].isin(selected_sklad)]
    dff = dff.sort_values('–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ', ascending=False).head(top_n)

    # –≤—ã—Å–æ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    graph_height = HEIGHT_PER_BAR * len(dff)
    # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    graph_height = min(graph_height, MAX_CONTAINER_HEIGHT)

    fig = px.bar(
        dff,
        y='–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞',
        x='–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ',
        color='–°–∫–ª–∞–¥',
        orientation='h',
        height=graph_height,
        title=f'–¢–æ–ø-{top_n} —Å–∞–º—ã—Ö —Ö–æ–¥–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤'
    )

    fig.update_layout(
        yaxis={'categoryorder': 'total ascending'},
        template='plotly_white',
        margin=dict(l=250),
    )
    return fig


@app.callback(
    Output('graph-top-restock', 'figure'),
    Input('sklad-filter', 'value'),
    Input('top-n-selector', 'value'),
)
def update_top_restock(selected_sklads, top_n):
    if not selected_sklads:
        return go.Figure()

    dff = restock_grouped[restock_grouped['–°–∫–ª–∞–¥'].isin(selected_sklads)]
    dff = dff.sort_values('–í—Å–µ–≥–æ_–ø–æ–ø–æ–ª–Ω–µ–Ω–æ', ascending=False).head(top_n)

    graph_height = HEIGHT_PER_BAR * len(dff)
    graph_height = min(graph_height, MAX_CONTAINER_HEIGHT)

    fig = px.bar(
        dff,
        y='–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞',
        x='–í—Å–µ–≥–æ_–ø–æ–ø–æ–ª–Ω–µ–Ω–æ',
        color='–°–∫–ª–∞–¥',
        orientation='h',
        height=graph_height,
        title=f'–¢–æ–ø-{top_n} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º'
    )

    fig.update_layout(
        yaxis={'categoryorder': 'total ascending'},
        template='plotly_white',
        margin=dict(l=250),
    )
    return fig

@app.callback(
    Output("peak-nom-filter", "options"),
    Input("peak-sklad-filter", "value"),
    Input("peak-article-filter", "value")
)
def update_nom_options(selected_sklad, selected_article):
    if not selected_sklad and not selected_article:
        return []

    dff = df_peaks.copy()
    if selected_sklad:
        dff = dff[dff["–°–∫–ª–∞–¥"] == selected_sklad]
    if selected_article:
        dff = dff[dff["–ê—Ä—Ç–∏–∫—É–ª"] == selected_article]

    return [{"label": nom, "value": nom} for nom in sorted(dff["–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞"].unique())]

@app.callback(
    Output('graph-peaks', 'figure'),
    Input('peak-sklad-filter', 'value'),
    Input('peak-article-filter', 'value'),
    Input('peak-nom-filter', 'value'),
)
def update_peaks_graph(sklad, article, nom):
    dff = df_peaks.copy()
    if sklad:
        dff = dff[dff['–°–∫–ª–∞–¥'] == sklad]
    if article:
        dff = dff[dff['–ê—Ä—Ç–∏–∫—É–ª'] == article]
    if nom:
        dff = dff[dff['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] == nom]

    if dff.empty:
        return go.Figure()

    dff = dff.sort_values('–î–∞—Ç–∞').tail(200)  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 200 —Å—Ç—Ä–æ–∫

    fig = go.Figure()

    for sklad_name, group in dff.groupby('–°–∫–ª–∞–¥'):
        fig.add_trace(go.Scatter(
            x=group['–î–∞—Ç–∞'],
            y=group['–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ'],
            mode='markers+lines',
            name=f'–ü—Ä–æ–¥–∞–Ω–æ - {sklad_name}',
            hovertemplate='–î–∞—Ç–∞: %{x}<br>–ü—Ä–æ–¥–∞–Ω–æ: %{y}<br>–ê—Ä—Ç–∏–∫—É–ª: %{customdata[0]}<br>–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞: %{customdata[1]}<extra></extra>',
            customdata=group[['–ê—Ä—Ç–∏–∫—É–ª', '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞']],
            yaxis='y1',
        ))

        fig.add_trace(go.Scatter(
            x=group['–î–∞—Ç–∞'],
            y=group['–°—Ä–µ–¥–Ω—è—è_—Ü–µ–Ω–∞'],
            mode='lines+markers',
            name=f'–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ - {sklad_name}',
            line=dict(dash='dot'),
            hovertemplate='–î–∞—Ç–∞: %{x}<br>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: %{y}<extra></extra>',
            yaxis='y2',
        ))

        fig.add_trace(go.Scatter(
            x=group['–î–∞—Ç–∞'],
            y=group['–ò–∑–º–µ–Ω–µ–Ω–∏–µ_—Ü–µ–Ω—ã_%'],
            mode='lines+markers',
            name=f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã % - {sklad_name}',
            line=dict(dash='dash'),
            hovertemplate='–î–∞—Ç–∞: %{x}<br>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã %: %{y}<extra></extra>',
            yaxis='y3',
        ))

    fig.update_layout(
        title='–í—Å–ø–ª–µ—Å–∫–∏ –ø—Ä–æ–¥–∞–∂ –∏ –¥–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω',
        xaxis=dict(title='–î–∞—Ç–∞'),
        yaxis=dict(title='–ü—Ä–æ–¥–∞–Ω–æ', side='left', showgrid=False, zeroline=False),
        yaxis2=dict(title='–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞', overlaying='y', side='right', showgrid=False, zeroline=False, position=0.95),
        yaxis3=dict(title='–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã %', overlaying='y', side='right', showgrid=False, zeroline=False,
                    position=1.0, anchor='free'),
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
        margin=dict(l=40, r=80, t=80, b=40),
        template='plotly_white'
    )
    return fig

@app.callback(
    Output("download-peaks-xlsx", "data"),
    Input("btn-download-peaks", "n_clicks"),
    State("peak-sklad-filter", "value"),
    State("peak-article-filter", "value"),
    State("peak-nom-filter", "value"),
    prevent_initial_call=True,
)
def download_peaks_excel(n_clicks, sklad, article, nom):
    dff = df_peaks.copy()
    if sklad:
        dff = dff[dff['–°–∫–ª–∞–¥'] == sklad]
    if article:
        dff = dff[dff['–ê—Ä—Ç–∏–∫—É–ª'] == article]
    if nom:
        dff = dff[dff['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] == nom]

    if dff.empty:
        return dash.no_update

    # –î–æ–±–∞–≤–∏–º —Å—Ç–æ–ª–±–µ—Ü —Å –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å—é (–µ—Å–ª–∏ –Ω–µ—Ç - —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –ø—Ä–∏–º–µ—Ä)
    # –ù–∞–ø—Ä–∏–º–µ—Ä: –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å = –í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ / –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ (–ø—Ä–∏–º–µ—Ä)
    # –ó–¥–µ—Å—å –ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å' not in dff.columns:
        dff['–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å'] = dff['–í—Å–µ–≥–æ_–ø—Ä–æ–¥–∞–Ω–æ'] / 10  # –ø—Ä–∏–º–µ—Ä

    import io
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        dff.to_excel(writer, index=False, sheet_name='–í—Å–ø–ª–µ—Å–∫–∏_–ø—Ä–æ–¥–∞–∂')
    output.seek(0)

    return dcc.send_bytes(output.read(), filename="–≤—Å–ø–ª–µ—Å–∫–∏_–ø—Ä–æ–¥–∞–∂.xlsx")

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8050)))
